//  ==========================================================================
//  Table of Content

//	- Colors
//	- Font Sizing - Rem:
//		- Base Font Sizing
//		- Font Sizing
//		- Font Sizing with Line-height
//	- Font Family
//  - Font Class List
//	- Button, Dropdown, Alert:
//		- Button Variant - Bootstrap
//		- Dropdown Variant
//		- Alert Variant - Bootstrap
//  - Form Elements:
//      - CheckBo Variant
//  - Tables - Bootstrap
//  - Boxes
//  - Panels - Bootstrap
//	- Responsive Utilities
//	- Grid System:
//	  	- With Gutter
//		- Without Gutter
//	- Sidebar System
//		- Generate Sidebar Columns
//		- Generate Sidebar Visibility Helpers
//	- Header System
//	- Footer System
//  - Z-index Class List
//	- Miscellaneous Mixins:
//		- Truncate String
//		- Multiline Truncate String
//		- Group
//		- Hide Text
//  ==========================================================================


//  ==========================================================================
//  Colors
//  ==========================================================================

@function color($color, $tone: 'base') {
	@if map-has-key($colors, $color) {
		@return map-get(map-get($colors, $color), $tone);
	}

	@warn "Unknown `#{$color}` in $colors.";
	@return null;
}


//  ==========================================================================
//  Font Sizing - Rem - ex. @include font-size(13px);
//  ==========================================================================

//  Base Font Sizing
//  ==========================================================================

@mixin font-size-base($sizeValue: $base-font-size) {
	font-size: $sizeValue;
	line-height: $sizeValue * 1.5;
}

//  Font Sizing
//  ==========================================================================

@mixin font-size($sizeValue: $base-font-size) {
	@include get-rem(font-size, $sizeValue);
}

//  Font Sizing with Line-height
//  ==========================================================================

@mixin font-size-line($sizeValue: $base-font-size){
	@include get-rem(font-size, $sizeValue);
    @include get-rem(line-height, $sizeValue * 1.5);
}

//  ==========================================================================
//  Rem size calculation with px as fallback
//
//  usage: @include get-rem(font-size, 14px)
//  usage: @include get-rem(marign, 0 12px 2 1.2)
//  usage: @include get-rem(padding, 1.5 24px)
//
//  thanks to Eric Meyer for https://github.com/ericam/susy
//  Hans Christian Reinl for http://drublic.de/blog/rem-fallback-sass-less/
//  and Steffen Rademacker for https://gist.github.com/webgefrickel/4530526
//  ==========================================================================

@mixin get-rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $this-base-font-size: $base-font-size; // should be consistent with your html/body font-size
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
		// 0 -- use it without a unit
		$px-values: join($px-values, 0);
		$rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
		// px value given - calculate rem value from this-base-font-size
		$new-rem-value: $value / $this-base-font-size;
		$px-values: join($px-values, round($value));
		$rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else {
		// unitless value - use those directly as rem and calculate the px-fallback
		$px-values: join($px-values, round($value * $this-base-font-size));
		$rem-values: join($rem-values, #{$value}rem);
    //}@else if $value == auto or $value == inherit {
	    // auto or inherit - don't add px or rem
	    $px-values: join($px-values, $value);
	    $rem-values: join($rem-values, $value);
	}
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;

}

//  ==========================================================================
//  Font Family
//  ==========================================================================

@function font-family($font: 'base') {
	@if map-has-key($fonts, $font) {
		@return map-get($fonts, $font);
	}

	@warn "Unknown `#{$font}` in $fonts.";
	@return null;
}


//  ==========================================================================
//  Font Class List
//  ==========================================================================

@mixin make-font-size-classes(){

    @each $font in $font-list  {
        .fz-#{$font}{
            @include font-size($font * 1px);
        }
    }
}


//  ==========================================================================
//  Button and Dropdown
//  ==========================================================================

//  Button Variant - Bootstrap
//  ==========================================================================

@mixin button-variant($color, $background, $border, $bg-ho: 4%, $bd-ho: 6%, $bg-fo: 6%, $bd-fo: 12%,  $bg-ac: 8%, $bd-ac: 14%) {
	color: $color;
	background-color: $background;
	border-color: $border;

	&:focus,
	&.focus {
		color: $color;
		background-color: darken($background, $bg-fo);
		border-color: darken($border, $bd-fo);
	}
	&:hover {
		color: $color;
		background-color: darken($background, $bg-ho);
		border-color: darken($border, $bd-ho);
	}
	&:active,
	&.active,
	.open > &.dropdown-toggle {
		color: $color;
		background-color: darken($background, $bg-fo);
		border-color: darken($border, $bd-fo);

		&:hover,
		&:focus,
		&.focus {
			color: $color;
			background-color: darken($background, $bg-ac);
			border-color: darken($border,  14%);
		}
	}

	&:active,
	&.active,
	.open > &.dropdown-toggle {
		background-image: none;
	}
	&.disabled,
	&[disabled],
	fieldset[disabled] & {
		&,
		&:hover,
		&:focus,
		&.focus,
		&:active,
		&.active {
			background-color: $background;
			border-color: $border;
		}
	}

	.badge {
		color: $background;
		background-color: $color;
	}
}

//  Dropdown Variant
//  ==========================================================================

@mixin dropdown-variant($color, $background, $border, $bg-ho: 4%) {
	color: $color;
	background-color: $background;
	border-color: $border;

	> li > a{
		color: $color;

		&:hover{
			color: $color;
			background-color: darken($background, $bg-ho);
		}
	}

	.divider{
		background-color: darken($background, $bg-ho);
	}
}

//  Alert Variant - Bootstrap
//  ==========================================================================

@mixin alert-variant($background, $border, $text-color) {
	background-color: $background;
	border-color: $border;
	color: $text-color;

	hr {
		border-top-color: darken($border, 5%);
	}
	.alert-link {
		color: darken($text-color, 10%);
	}
}

//  ==========================================================================
//  Form Elements
//  ==========================================================================

//  CheckBo Variant 1
//  ==========================================================================

@mixin checkbo-variant-1($name, $color, $color-2){
	.cb-checkbox-#{$name},
	.cb-radio-#{$name}{
		.cb-inner { border: 1px solid darken($color, 10%); }
		&:hover{ .cb-inner { border-color: darken($color, 20%); } }
	}

	// Checkbox
	.cb-checkbox-#{$name} {
		i { &:before, &:after { background-color: $color; } }

		&.checked {
			.cb-inner {
				border-color: darken($color, 10%);
				background-color: $color-2;
			}
		}
	}

	// Radio Button
	.cb-radio-#{$name} {
		&.checked {
			.cb-inner { background: $color-2; }
			i { background-color: $color; }
		}
	}
}


//  CheckBo Variant 2
//  ==========================================================================

@mixin checkbo-variant-2($name, $color, $color-2){
	.cb-checkbox-#{$name},
	.cb-radio-#{$name}{
		.cb-inner { border: 1px solid darken($color, 10%); }
		&:hover{ .cb-inner { border-color: darken($color, 20%); } }
	}

	// Checkbox
	.cb-checkbox-#{$name} {
		i { &:before, &:after { background-color: $color-2; } }

		&.checked {
			.cb-inner {
				border-color: darken($color, 10%);
				background-color: $color;
			}
		}
	}

	// Radio Button
	.cb-radio-#{$name} {
		&.checked {
			.cb-inner { background: $color; }
			i { background-color: $color-2; }
		}
	}
}

//  ==========================================================================
//  Tables - Bootstrap
//  ==========================================================================

@mixin table-row-variant($state, $background) {
	// Exact selectors below required to override `.table-striped` and prevent
	// inheritance to nested tables.
	.table > thead > tr,
	.table > tbody > tr,
	.table > tfoot > tr {
		> td.#{$state},
		> th.#{$state},
		&.#{$state} > td,
		&.#{$state} > th {
			background-color: $background;
		}
	}

	// Hover states for `.table-hover`
	// Note: this is not available for cells or rows within `thead` or `tfoot`.
	.table-hover > tbody > tr {
		> td.#{$state}:hover,
		> th.#{$state}:hover,
		&.#{$state}:hover > td,
		&:hover > .#{$state},
		&.#{$state}:hover > th {
			background-color: darken($background, 5%);
		}
	}
}

//  ==========================================================================
//  Boxes
//  ==========================================================================

@mixin box-variant($border, $heading-text-color, $heading-bg-color, $heading-border) {
	border-color: $border;

	& > .l-box-header,
	& > .l-box-footer{
		color: $heading-text-color;
		background-color: $heading-bg-color;
		border-color: $heading-border;

		.badge {
			color: $heading-bg-color;
			background-color: $heading-text-color;
		}
	}
}

//  ==========================================================================
//  Panels - Bootstrap
//  ==========================================================================

@mixin panel-variant($border, $heading-text-color, $heading-bg-color, $heading-border) {
	border-color: $border;

	& > .panel-heading {
		color: $heading-text-color;
		background-color: $heading-bg-color;
		border-color: $heading-border;

		a:hover,
		a:focus{
			color: darken($heading-text-color,20%);
		}

		+ .panel-collapse > .panel-body {
			border-top-color: $border;
		}
		.badge {
			color: $heading-bg-color;
			background-color: $heading-text-color;
		}
	}
	& > .panel-footer {
		+ .panel-collapse > .panel-body {
			border-bottom-color: $border;
		}
	}
}


//  ==========================================================================
//  Feedback states
//  ==========================================================================

@mixin form-control-validation($text-color: #555, $border-color: #ccc, $background-color: #f5f5f5) {
	// Color the label and help text
	.help-block,
	.control-label,
	.radio,
	.checkbox,
	.radio-inline,
	.checkbox-inline,
	&.radio label,
	&.checkbox label,
	&.radio-inline label,
	&.checkbox-inline label  {
		color: $text-color;
	}
	// Set the border and box shadow on specific inputs to match
	.form-control {
		border-color: $border-color;
		@include box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
		&:focus {
			border-color: darken($border-color, 5%);
			$shadow: inset 0 1px 1px rgba(0,0,0,.035), 0 0 3px lighten($border-color, 20%);
			@include box-shadow($shadow);
		}
	}
	// Set validation states also for addons
	.input-group-addon {
		color: $text-color;
		border-color: $border-color;
		background-color: $background-color;
	}
	// Optional feedback icon
	.form-control-feedback {
		color: $text-color;
	}
}


//  ==========================================================================
//  Responsive Utilities
//  ==========================================================================

// [converter] $parent hack
@mixin responsive-visibility($parent) {
	#{$parent} {
		display: block !important;
	}
	table#{$parent}  { display: table; }
	tr#{$parent}     { display: table-row !important; }
	th#{$parent},
	td#{$parent}     { display: table-cell !important; }
}

// [converter] $parent hack
@mixin responsive-invisibility($parent) {
	#{$parent} {
		display: none !important;
	}
}

//  ==========================================================================
//  Grid System
//  ==========================================================================


//  With Gutter
//  ==========================================================================

@mixin make-l-col-grid($grid-size){

/*  Grid with Gutter
	-------------------------------------------------------------------------- */
	@for $i from 1 through $grid-columns {

		.l-col-#{$grid-size}-#{$i}{ @include col($i/$grid-columns, $gutter: $s-gutter-grid); }
	}
}


//  Without Gutter
//  ==========================================================================

@mixin make-l-span-grid($grid-size){

/*  Grid without Gutter
	-------------------------------------------------------------------------- */
    @for $i from 1 through $grid-columns {

        .l-span-#{$grid-size}-#{$i}{ @include span($i/$grid-columns); }
    }
}


//  ==========================================================================
//  Sidebar System
//  ==========================================================================

//  Generate Sidebar Columns
//  ==========================================================================

@mixin make-sidebar-columns($sidebar-values-list){

	// Sidebar
	@each $name, $value in $sidebar-values-list  {

		/* Sidebar - #{$name} ------------------ */

	 	.l-sidebar-#{$name}{ width: #{$value}; }

		@if($generate-slidebars-left) {
			/* Slidebar - Left */
			.l-slidebar-left-#{$name} { width: #{$value}; left: -#{$value}; }
			.l-slidebar-left-push-#{$name} { left: #{$value}; .l-slidebar-static.l-slidebar-left-open{ left: -#{$value}; } }
		}

		@if($generate-slidebars-right) {
			/* Slidebar - Right */
			.l-slidebar-right-#{$name} { width: #{$value}; right: -#{$value}; }
			.l-slidebar-right-push-#{$name} { left: -#{$value}; .l-slidebar-static.l-slidebar-right-open{ right: -#{$value}; } }
		}
	}

}

//  Generate Sidebar Visibility Helpers
//  ==========================================================================
@mixin make-sidebar-visibility($sidebar-state){

	.visible-#{$sidebar-state}-block			{ display: block !important; }
	.visible-#{$sidebar-state}-inline			{ display: inline !important; }
	.visible-#{$sidebar-state}-inline-block		{ display: inline-block !important; }
	.hidden-#{$sidebar-state}					{ display: none !important; }
}

@mixin make-sidebar-invisibility($sidebar-state) {
	.visible-#{$sidebar-state}-block,
	.visible-#{$sidebar-state}-inline,
	.visible-#{$sidebar-state}-inline-block {
		display: none !important;
	}
}


//  ==========================================================================
//  Header System
//  ==========================================================================

@mixin make-headers(){

	// Headers
	@each $name, $value in $header-values-list  {

		/* Header - #{$name} ------------------ */

		.l-header-#{$name}{ min-height: #{$value}; }

		@if($generate-header-fixed) {
			/* Fixed */
			.l-header-fixed-#{$name} {
				.has-header-#{$name} { margin-top:#{$value}; }
				.l-header-#{$name}{ position: absolute; top: -#{$value}; left: 0; z-index: 150; }
			}
		}

		@if($generate-header-sticky) {
			/* Sticky */
			.l-header-sticky-#{$name} {
				.has-header-#{$name} { margin-top:#{$value}; }
				.l-header-#{$name}{ position: fixed; top: 0; left: 0; z-index: 160; }
			}
		}

		@if($generate-header-slide) {
			/* Slide */
			.l-header-slide-#{$name}      { height: #{$value}; top: -#{$value}; }
			.l-header-slide-push-#{$name} { top: #{$value}; }
		}
	}
}


//  ==========================================================================
//  Footer System
//  ==========================================================================

@mixin make-footers(){

	// Footers
	@each $name, $value in $footer-values-list  {

		/* Footer - #{$name} ------------------ */

		.l-footer-#{$name}{ min-height: #{$value}; }

		@if($generate-header-fixed) {
			/* Fixed */
			.l-footer-fixed-#{$name} {
				.has-footer-#{$name} { margin-bottom:#{$value}; }
				.l-footer-#{$name}{ position: absolute; bottom: -#{$value}; left: 0; z-index: 100; }
			}
		}

		@if($generate-header-sticky) {
			/* Sticky */
			.l-footer-sticky-#{$name} {
				.has-footer-#{$name} { margin-bottom:#{$value}; }
				.l-footer-#{$name}{ position: fixed; bottom: 0; left: 0; z-index: 110; }
			}
		}

		@if($generate-header-slide) {
			/* Slide */
			.l-footer-slide-#{$name}      { height: #{$value}; bottom: -#{$value}; }
			.l-footer-slide-push-#{$name} { bottom: #{$value}; }
		}

	}
}

//  ==========================================================================
//  Z-index Class List
//  ==========================================================================

@mixin make-z-index-classes(){

	@each $z-index in $z-index-list  {
		.z-index-#{$z-index}{
			z-index: $z-index;
		}
	}
}



//  ==========================================================================
//  Miscellaneous Mixins
//  ==========================================================================

//  Truncate String
//  ==========================================================================

@mixin truncate-string(){

	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;

}

//  Multiline Truncate String
//  ==========================================================================

@mixin multiline-truncate-string($height, $lineheight:1.5, $ellipsiswidth: 3em) {

	overflow: hidden;
	height: $height;
	line-height: $lineheight;

	&:before {
		content:"";
		float: left;
		width: 5px; height: $height;
	}

	> *:first-child {
		float: right;
		width: 100%;
		margin-left: -5px;
	}

	&:after {
//		content: "\02026";
		content: "(+)";

		float: right;
		position: relative;
		top: -20px;
		left: 95%;
		width: $ellipsiswidth;
		margin-left: -$ellipsiswidth;
		padding-right: 5px;

		text-align: right;
		background: white;
		background: -webkit-gradient(linear, left top, right top,
				from(rgba(255, 255, 255, 0)), to(white), color-stop(50%, white));
		background: -moz-linear-gradient(to right, rgba(255, 255, 255, 0), white 50%, white);
		background: -o-linear-gradient(to right, rgba(255, 255, 255, 0), white 50%, white);
		background: -ms-linear-gradient(to right, rgba(255, 255, 255, 0), white 50%, white);
		background: linear-gradient(to right, rgba(255, 255, 255, 0), white 50%, white)
	}

}

//  Group
//  ==========================================================================

@mixin group() {

	*zoom: 1;
	&:before, &:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}

//  Hide Text
//  ==========================================================================

@mixin hide-text {
	text-indent: 100%;
	white-space: nowrap;
	overflow: hidden;
}
